// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using managerelchenchenvuelve.Models;

#nullable disable

namespace managerelchenchenvuelve.Migrations
{
    [DbContext(typeof(ToyoNoToyContext))]
    [Migration("20250605181503_Inicio")]
    partial class Inicio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("managerelchenchenvuelve.Models.AsignacionClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ids")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Letters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Usuario")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AsignacionClasss");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ProcessInstanceId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IdentificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RequestId" }, "IX_Contacts_Include");

                    b.HasIndex(new[] { "RequestId" }, "IX_Contacts_RequestId")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.DatosReca", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodigoDeSolicitud")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompletaActividad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Etapa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FechaActualizacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FechaFormateada")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Tiempo")
                        .HasColumnType("int");

                    b.Property<string>("TiempoTranscurrido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gestor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DatosRecas");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.DocumentReference", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DocumentTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessInstanceId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StageName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("DocumentReferences");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.Enterprise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessDescription")
                        .HasMaxLength(600)
                        .IsUnicode(false)
                        .HasColumnType("varchar(600)");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BusinessTime")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasDefaultValue("");

                    b.Property<string>("Corregimiento")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("EconomicActivity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("MonthlySales")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("OperationsStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Province")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<decimal>("ProyectedSales")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ruc")
                        .HasMaxLength(28)
                        .IsUnicode(false)
                        .HasColumnType("varchar(28)");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BusinessDescription" }, "IX_Enterprises_Include");

                    b.HasIndex(new[] { "RequestId" }, "IX_Enterprises_RequestId")
                        .IsUnique();

                    b.ToTable("Enterprises");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Suggestion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Requests_Id");

                    b.HasIndex(new[] { "Id" }, "IX_Requests_Include");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.RequestDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagementExecuted")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("managementExecuted");

                    b.Property<decimal>("QuantityToInvert")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ReasonForMoney")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoAtencion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VerifyClient")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RequestId" }, "IX_RequestDetails_Include");

                    b.HasIndex(new[] { "RequestId" }, "IX_RequestDetails_RequestId")
                        .IsUnique();

                    b.ToTable("RequestDetails");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.RequestDetailsCopium", b =>
                {
                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("QuantityToInvert")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ReasonForMoney")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("RequestDetails_copia", (string)null);
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.RequestInfo", b =>
                {
                    b.Property<string>("ActividadEconomica")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Actividad_economica");

                    b.Property<string>("Apellido")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid?>("CodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cod_ID");

                    b.Property<string>("CodigoDeSolicitud")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Codigo_de_solicitud");

                    b.Property<string>("CompletaActividad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Corregimiento")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("corregimiento");

                    b.Property<string>("CorreoElectronico")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Correo_Electronico");

                    b.Property<string>("CuantoChenchenNecesitas")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Cuanto_Chenchen_necesitas");

                    b.Property<string>("DescripcionNegocio")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Descripcion_negocio");

                    b.Property<string>("Distrito")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("EnQueLoInvertiras")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("En_que_lo_invertiras");

                    b.Property<string>("Etapa")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("EtapaDelNegocio")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasColumnName("Etapa_del_Negocio");

                    b.Property<string>("FechaActualizacion")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Fecha_Actualizacion");

                    b.Property<DateTimeOffset?>("FechaDeCreacion")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("Fecha_de_Creacion");

                    b.Property<string>("FechaFormateada")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FechaInicioOperaciones")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Fecha_Inicio_Operaciones");

                    b.Property<string>("GestionRealizada")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Gestion_Realizada");

                    b.Property<string>("Gestor")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<Guid?>("IdChen")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_chen");

                    b.Property<string>("Instagram")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("NombreNegocio")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Nombre_Negocio");

                    b.Property<string>("NumeroIdentificacion")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Numero_identificacion");

                    b.Property<string>("PorqueNoContacto")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Porque_no_contacto");

                    b.Property<string>("Provincia")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ProyeccionVentasMensuales")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Proyeccion_ventas_mensuales");

                    b.Property<string>("Ruc")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("RUC");

                    b.Property<string>("Telefono")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("Tiempo")
                        .HasColumnType("int");

                    b.Property<string>("TiempoTranscurrido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAtencion")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Tipo_atencion");

                    b.Property<string>("TipoIdentificacion")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Tipo_identificacion");

                    b.Property<int?>("TipoRequest")
                        .HasColumnType("int(14)");

                    b.Property<string>("UsuarioAsignado")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Usuario_Asignado");

                    b.Property<string>("VentasMensuales")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Ventas_mensuales");

                    b.Property<string>("VerificacionCliente")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Verificacion_Cliente");

                    b.Property<string>("WebSite")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Web_Site");

                    b.ToTable("Request_Info", (string)null);
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.RequestsCopium", b =>
                {
                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Suggestion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Requests_copia", (string)null);
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActiveDirectoryGroup")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsActiveDirectorySync")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RolName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.Useres", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateUpdate");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IndUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IndUpdate");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.VwUserRolesInfo", b =>
                {
                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IndUpdate")
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IndUpdate");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(61)
                        .HasColumnType("nvarchar(61)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RolName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.ToTable((string)null);

                    b.ToView("vw_UserRolesInfo", (string)null);
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.Contact", b =>
                {
                    b.HasOne("managerelchenchenvuelve.Models.Request", "Request")
                        .WithOne("Contact")
                        .HasForeignKey("managerelchenchenvuelve.Models.Contact", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.Enterprise", b =>
                {
                    b.HasOne("managerelchenchenvuelve.Models.Request", "Request")
                        .WithOne("Enterprise")
                        .HasForeignKey("managerelchenchenvuelve.Models.Enterprise", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.RequestDetail", b =>
                {
                    b.HasOne("managerelchenchenvuelve.Models.Request", "Request")
                        .WithOne("RequestDetail")
                        .HasForeignKey("managerelchenchenvuelve.Models.RequestDetail", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("managerelchenchenvuelve.Models.Request", b =>
                {
                    b.Navigation("Contact");

                    b.Navigation("Enterprise");

                    b.Navigation("RequestDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
